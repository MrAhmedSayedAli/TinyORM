list(APPEND CMAKE_MESSAGE_CONTEXT @TinyOrm_ns@ CVF)

message(DEBUG "${PACKAGE_FIND_NAME} ${PACKAGE_VERSION} package version file for \
the Build Tree")

list(APPEND CMAKE_MESSAGE_INDENT "  ")

message(DEBUG "PACKAGE_FIND_VERSION = ${PACKAGE_FIND_VERSION}")

# Helpers to match build configuration types for a Build Tree
# Build configurations are considered to match only when they are equal if
# the MATCH_EQUAL_EXPORTED_BUILDTREE option is enabled or for MSVC, build
# configurations are considered to match if both are "Debug" or neither
# is "Debug", otherwise all other configurations can be matched freely.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/Modules")

include(TinyPackageConfigHelpers)
tiny_build_type_requirements_build_tree(
    PACKAGE_VERSION PACKAGE_VERSION_UNSUITABLE
    @cvf_is_multi_config@ "@CMAKE_BUILD_TYPE@" @MATCH_EQUAL_EXPORTED_BUILDTREE@
)

message(DEBUG "PACKAGE_VERSION = ${PACKAGE_VERSION}")
message(DEBUG "PACKAGE_VERSION_EXACT = ${PACKAGE_VERSION_EXACT}")
message(DEBUG "PACKAGE_VERSION_COMPATIBLE = ${PACKAGE_VERSION_COMPATIBLE}")
message(DEBUG "PACKAGE_VERSION_UNSUITABLE = ${PACKAGE_VERSION_UNSUITABLE}")

list(POP_BACK CMAKE_MESSAGE_INDENT)

message(DEBUG "${PACKAGE_FIND_NAME} ${PACKAGE_VERSION} package version file for \
the Build Tree - done")

if(PACKAGE_VERSION_UNSUITABLE)
    message(STATUS "Skipped unsuitable package ${PACKAGE_FIND_NAME} ${PACKAGE_VERSION} \
(requested ${PACKAGE_FIND_VERSION_COMPLETE}) at ${CMAKE_CURRENT_LIST_FILE}")
    return()
endif()

list(POP_BACK CMAKE_MESSAGE_CONTEXT)
list(POP_BACK CMAKE_MESSAGE_CONTEXT)
